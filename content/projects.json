[
  {
  "slug": "safe-byte",
  "title": "SafeByte",
  "teaser": "Progressive Web Application til allergiscanning og real-time opslag.",
  "date": "2025-01-01",
  "category": "PWA",
  "type": "Bachelorprojekt (Softwareteknologi, B.Eng)",
  "technologies": [
    "React",
    "Progressive Web App (PWA)",
    "Barcode/QR Scanner",
    "Firebase (Auth & Firestore)",
    "REST API"
  ],
  "shortDescription": "SafeByte er designet til at hj√¶lpe personer med f√∏devareallergi med hurtigt at identificere allergener i dagligvarer. Brugeren kan scanne stregkoder direkte fra produktet via en mobil eller tablet, hvorefter systemet matcher varen mod en personlig allergidatabase. Appen giver √∏jeblikkelig feedback og advarsler, hvis varen indeholder ingredienser, brugeren b√∏r undg√•.",
  "features": [
    "üì± Barcode scanning via kamera p√• mobil eller tablet",
    "üõ° Personlig allergiprofiler gemt i Firebase",
    "‚òÅ Cloud-baseret database med produkt- og ingrediensinformation",
    "üîÑ Real-time synkronisering p√• tv√¶rs af enheder",
    "üí° PWA-funktionalitet ‚Äì kan installeres som app uden App Store/Google Play",
    "üîê Sikker login med Firebase Authentication"
  ],
  "result": "SafeByte demonstrerer, hvordan moderne webteknologier kan skabe en hurtig, brugervenlig og tilg√¶ngelig l√∏sning til et reelt sundhedsproblem. Projektet kombinerer UX-design, API-integration, cloud-teknologi og sikkerhedsaspekter i √©t sammenh√¶ngende produkt.",
  "stack": [
    "React",
    "Firebase auth & Firestore DB",
    "Barcode scanning",
    "camera access",
    "cross platform",
    "individual profile",
    "API integration (food data and auth)"
  ],
  "md": "./safe-byte.json",
  "links": [
    {
      "label": "Vercel Deployment: prototype",
      "url": "http://safe-byte-react-bachelor.vercel.app"
    }
  ]
},
  {
    "slug": "Cake-Recipe-App",
    "title": "Cake Recipe App",
    "teaser": "Android/Kotlin app til kage opskrifter.",
    "date": "2023-10-01",
    "category": "Mobile",
    "type": "Android App Projekt",
    "technologies": [
      "Android Studio",
      "Server Actions",
      "Dockerization",
      "Image optimering"
    ],
    "shortDescription": "En opskriftsapp med fokus p√• l√¶kkert UI og hurtig s√∏gning.",
    "features": [
      "Trin-for-trin visning med timers og ‚Äúcook mode‚Äù",
      "S√∏g & filtrer p√• sv√¶rhedsgrad, tid og ingredienser",
      "Favoritter & delbare links",
      "CMS-lignende redigering af opskrifter"
    ],
    "result": "Appen g√∏r det nemt og hurtigt at finde, tilpasse og f√∏lge opskrifter ‚Äì med et moderne og brugervenligt design.",
    "stack": ["Kotlin", "Android", "SQLite"],
    "md": "../public/projectsmarkdown/cakes.md"
  },
  {
    "slug": "pet-feeder",
    "title": "Automatisk Foderdispenser",
    "teaser": "IoT-system med PSoC og Raspberry Pi.",
    "date": "2023-05-20",
    "category": "IoT",
    "type": "Semesterprojekt (IoT & Embedded)",
    "technologies": [
      "PSoC",
      "Raspberry Pi",
      "C",
      "C++",
      "React PWA",
      "Docker",
      "MQTT",
      "REST API"
    ],
    "shortDescription": "Moderne, skalerbar IoT-l√∏sning til automatisk fodring af k√¶ledyr. Systemet kombinerer hardware (PSoC, Raspberry Pi) og software (React PWA, Docker) med sikker kommunikation.",
    "features": [
      "Automatisk fodring: Tidsplanl√¶gning og manuel aktivering via app",
      "Sensoroverv√•gning: V√¶gt- og niveausensorer sikrer korrekt foderm√¶ngde og advarer ved lavt niveau",
      "Fjernstyring: Brugeren kan styre dispenseren fra hvor som helst via PWA",
      "Dataopsamling: Logning af fodringshistorik og sensorstatus",
      "Sikkerhed: Adgangskontrol og sikker kommunikation mellem enheder"
    ],
    "result": "Projektet resulterede i en robust prototype, der demonstrerer automatiseret fodring, realtidsdata og fjernstyring. L√∏sningen kan udvides med flere sensorer eller smart home-integration.",
    "stack": ["C", "C++", "PSoC", "Raspberry Pi", "React PWA til frontend", "docker til backend og database"],
    "md": "./pet-feeder.json"
  },
  {
    "slug": "machine-learning-projects",
    "title": "Machine Learning Projekter",
    "teaser": "Samlet portef√∏lje af ML-projekter: regression, CNN, overfitting/generalisation og NLP.",
    "date": "2024-05-15",
    "category": "Machine Learning",
    "type": "Semesterprojekt (Machine Learning)",
    "technologies": [
      "Python",
      "NumPy",
      "pandas",
      "matplotlib",
      "scikit-learn",
      "TensorFlow/Keras",
      "spaCy"
    ],
    "shortDescription": "Fokus var at g√• fra klassiske modeller til dybere arkitekturer og afslutte med NLP og embeddings.",
    "features": [
      "Line√¶r regression, logistisk regression, beslutningstr√¶er og SVM",
      "Datas√¶tforst√•else, pr√¶processering og m√•lemetrikker (accuracy, precision/recall, confusion matrix)",
      "Bias/variance trade-off",
      "CNN p√• MNIST til h√•ndskriftgenkendelse",
      "Overfitting & regularisering: early stopping, dropout, L2",
      "Modelkompleksitet og generalisering",
      "Duplicate Question Detection (Quora dataset) med spaCy og SVM",
      "Visualisering af embeddings med t-SNE",
      "Egen pipeline for tekstrepr√¶sentation"
    ],
    "result": "Projektet gav erfaring med b√•de klassiske og dybe ML-modeller, computer vision og NLP. Resultatet var robuste baselines og bedre forst√•else af generalisering og semantiske repr√¶sentationer.",
    "stack": ["Python", "NumPy", "scikit-learn", "TensorFlow/Keras", "spaCy"],
    "md": "./machine-learning.json"
  },
{
  "slug": "marketplace-architecture",
  "title": "Marketplace ‚Äì Web Architecture & Orchestration",
  "teaser": "Microservices, event bus, Kubernetes orchestration, observability og zero-downtime deploys.",
  "date": "2024-05-01",
  "category": "Web Architecture",
  "type": "Semesterprojekt (Web Architecture & Orchestration)",
  "technologies": [
    "Next.js",
    "Node/Express",
    "PostgreSQL",
    "Kubernetes",
    "Helm",
    "GraphQL",
    "RabbitMQ",
    "Redis",
    "Grafana",
    "OpenTelemetry"
  ],
  "shortDescription": "En skalerbar marketplace app, hvor s√¶lgere kan oprette produkter og k√∏bere kan s√∏ge, l√¶gge i kurv og gennemf√∏re betaling. Orkestreret med Kubernetes, RabbitMQ til kommunikation mellem brugere og GraphQL til databaseh√•ndtering. Arkitekturen prioriterer resiliens, skalerbarhed og hurtige releases.",
  "features": [
    "Web (Next.js) ‚Äì SSR/ISR, produkt-/kategori-sider, checkout UI",
    "BFF / API-Gateway ‚Äì edge-API til klienter, aggregerer kald til services",
    "GoogleAuth til login",
    "Catalog Service ‚Äì CRUD for produkter, kategorier, lager",
    "Cart Service ‚Äì session/brugerkurv (Redis for hurtighed)",
    "Order Service ‚Äì ordreoprettelse, status, idempotent opf√∏rsel",
    "Notification Service ‚Äì e-mail/push (async via event bus/queue)",
    "Event Bus ‚Äì RabbitMQ for asynkrone beskeder",
    "Infra ‚Äì Kubernetes, Grafana + OpenTelemetry"
  ],
  "result": "Projektet demonstrerer en moderne, robust og skalerbar webarkitektur med microservices, event-bus, orchestration og observability. L√∏sningen muligg√∏r hurtige releases og h√∏j resiliens.",
  "stack": ["Next.js", "Node/Express", "PostgreSQL","Kubernetes", "Helm", "graphQL", "RabbitMQ","Grafana"],
  "md": "./marketsplace-architecture.json"
}

]
